setwd('~/Documents/Philippines/Genetics/parentage/Cervus_2016-01-06/')
setwd('~/Documents/Philippines/Genetics/parentage/Cervus_2016-01-06/')
dat = read.csv('DP20_edited_genepop/DP20proposed_ID.csv', stringsAsFactors=FALSE)
nrow(dat) # 101
# add year of the sample#
dat$First.year = as.numeric(paste('20', gsub('APCL_|[0-9,A-Z]{3}L[0-9]{4}', '', dat$First.ID, perl=TRUE), sep=''))#
dat$Second.year = as.numeric(paste('20', gsub('APCL_|[0-9,A-Z]{3}L[0-9]{4}', '', dat$Second.ID, perl=TRUE), sep=''))
# fix ID to always have 4-digit ligation IDs (needed for matching against Sample_Data google sheet)#
ind = grep('L[[:digit:]]{3}$', dat$First.ID) # rows with 3-digit ligation IDs#
dat$First.ID[ind] = gsub('L([[:digit:]]{3})$', 'L0\\1', dat$First.ID[ind])#
ind = grep('L[[:digit:]]{3}$', dat$Second.ID)#
dat$Second.ID[ind] = gsub('L([[:digit:]]{3})$', 'L0\\1', dat$Second.ID[ind])
# add sampleid#
dat$First.SampleID_dd = gsub('L[[:digit:]]{1,}$', '', dat$First.ID)#
dat$Second.SampleID_dd = gsub('L[[:digit:]]{1,}$', '', dat$Second.ID)
#fix sampleid from dDocent format back to Sample_Data format#
dat$First.SampleID = paste('APCL', gsub('20', '', dat$First.year), '_', gsub('APCL_[0-9]{2}', '', dat$First.SampleID_dd, perl=TRUE), sep='')	#
dat$Second.SampleID = paste('APCL', gsub('20', '', dat$Second.year), '_', gsub('APCL_[0-9]{2}', '', dat$Second.SampleID_dd, perl=TRUE), sep='')
# add lat/lon from our Google Sheet#
require(googlesheets)#
# gs_auth(new_user = TRUE) # run this if having authorization problems#
mykey = '1Rf_dFJ5WK-vTTsIT_kHHOcFrKzQtMFtKiuXiFw1lh9Y' # for Sample_Data sheet#
gssampdat <- gs_key(mykey)#
sampledata <- gs_read(gssampdat, ws='Samples')#
#
m1 = sampledata#
names(m1) = paste('First.', names(m1), sep='')#
dat = merge(dat, m1, by.x='First.SampleID', by.y = 'First.Sample_ID', all.x=TRUE)#
m2 = sampledata#
names(m2) = paste('Second.', names(m2), sep='')#
dat = merge(dat, m2, by.x='Second.SampleID', by.y = 'Second.Sample_ID', all.x=TRUE)
setwd('~/Documents/Philippines/Genetics/parentage/Cervus_2016-01-06/')
dat = read.csv('DP20_edited_genepop/DP20proposed_ID.csv', stringsAsFactors=FALSE)#
nrow(dat) # 101
dat
names(dat)
# add year of the sample#
dat$First.year = as.numeric(paste('20', gsub('APCL_|[0-9,A-Z]{3}L[0-9]{4}', '', dat$First.ID, perl=TRUE), sep=''))#
dat$Second.year = as.numeric(paste('20', gsub('APCL_|[0-9,A-Z]{3}L[0-9]{4}', '', dat$Second.ID, perl=TRUE), sep=''))
names(dat)
# fix ID to always have 4-digit ligation IDs (needed for matching against Sample_Data google sheet)#
ind = grep('L[[:digit:]]{3}$', dat$First.ID) # rows with 3-digit ligation IDs#
dat$First.ID[ind] = gsub('L([[:digit:]]{3})$', 'L0\\1', dat$First.ID[ind])#
ind = grep('L[[:digit:]]{3}$', dat$Second.ID)#
dat$Second.ID[ind] = gsub('L([[:digit:]]{3})$', 'L0\\1', dat$Second.ID[ind])
names(dat)
head(dat)
# add sampleid#
dat$First.SampleID_dd = gsub('L[[:digit:]]{1,}$', '', dat$First.ID)#
dat$Second.SampleID_dd = gsub('L[[:digit:]]{1,}$', '', dat$Second.ID)
names(dat)
head(dat)
#fix sampleid from dDocent format back to Sample_Data format#
dat$First.SampleID = paste('APCL', gsub('20', '', dat$First.year), '_', gsub('APCL_[0-9]{2}', '', dat$First.SampleID_dd, perl=TRUE), sep='')	#
dat$Second.SampleID = paste('APCL', gsub('20', '', dat$Second.year), '_', gsub('APCL_[0-9]{2}', '', dat$Second.SampleID_dd, perl=TRUE), sep='')
head(dat)
#write out a csv of the dat up to this point - change the sample_IDs based on potential ID errors - then continue#
	write.csv(dat, file='potential.csv')
#read it back in with the changes#
	dat = read.csv('DP20_edited_genepop/potential.csv', stringsAsFactors=FALSE)
#read it back in with the changes#
	dat = read.csv('potential.csv', stringsAsFactors=FALSE)
# add lat/lon from our Google Sheet#
require(googlesheets)#
# gs_auth(new_user = TRUE) # run this if having authorization problems#
mykey = '1Rf_dFJ5WK-vTTsIT_kHHOcFrKzQtMFtKiuXiFw1lh9Y' # for Sample_Data sheet#
gssampdat <- gs_key(mykey)#
sampledata <- gs_read(gssampdat, ws='Samples')
m1 = sampledata#
names(m1) = paste('First.', names(m1), sep='')#
dat = merge(dat, m1, by.x='First.SampleID', by.y = 'First.Sample_ID', all.x=TRUE)#
m2 = sampledata#
names(m2) = paste('Second.', names(m2), sep='')#
dat = merge(dat, m2, by.x='Second.SampleID', by.y = 'Second.Sample_ID', all.x=TRUE)
# distance between samples#
require(fields)#
# source('greatcircle_funcs.R') # alternative, probably faster#
alldists = rdist.earth(as.matrix(dat[,c('First.Lon', 'First.Lat')]), as.matrix(dat[,c('Second.Lon', 'Second.Lat')]), miles=FALSE, R=6371) # see http://www.r-bloggers.com/great-circle-distance-calculations-in-r/ # slow because it does ALL pairwise distances, instead of just in order#
dat$distkm = diag(alldists)
# add ligation ID#
dat$First.LigID = as.numeric(gsub('APCL[[:digit:]]{2}_[[:digit:]]{1,}L', '', dat$First.ID))#
dat$Second.LigID = as.numeric(gsub('APCL[[:digit:]]{2}_[[:digit:]]{1,}L', '', dat$Second.ID))
# add mismatch rate#
	dat$Mismatch.prop = dat$Mismatching.loci/dat$Matching.loci
# order by number of matching loci#
dat = dat[order(dat$Matching.loci),]
#order by Mismatch.prop#
dat=dat[order(dat$Mismatch.prop),]#
#
dat$col[dat$MATCH == "MATCH_***"]<-"purple"#
dat$col[dat$MATCH == "MATCH_diff_year_small_dist"]<-"blue"#
dat$col[dat$MATCH == "MATCH_regenotyped"]<-"green"#
dat$col[dat$MATCH == "MATCH_same_anem_diff_year"]<-"yellow"#
dat$col[dat$MATCH == "NO_diff_year_large_dist"]<-"cyan"#
dat$col[dat$MATCH == "NO_same_year_consec_samples"]<-"red"#
dat$col[dat$MATCH == "NO_same_year_large_dist"]<-"pink"#
dat$col[dat$MATCH == "NO_same_year_same_anem"]<-"black"
head(data)
head(dat)
write.csv(dat, file='proposed_lats.csv')
#read it back in with the changes#
	dat = read.csv('potential.csv', stringsAsFactors=FALSE)
#read it back in with the changes#
	dat = read.csv('potential.csv', stringsAsFactors=FALSE)
# add lat/lon from our Google Sheet#
require(googlesheets)#
# gs_auth(new_user = TRUE) # run this if having authorization problems#
mykey = '1Rf_dFJ5WK-vTTsIT_kHHOcFrKzQtMFtKiuXiFw1lh9Y' # for Sample_Data sheet#
gssampdat <- gs_key(mykey)#
sampledata <- gs_read(gssampdat, ws='Samples')#
#
m1 = sampledata#
names(m1) = paste('First.', names(m1), sep='')#
dat = merge(dat, m1, by.x='First.SampleID', by.y = 'First.Sample_ID', all.x=TRUE)#
m2 = sampledata#
names(m2) = paste('Second.', names(m2), sep='')#
dat = merge(dat, m2, by.x='Second.SampleID', by.y = 'Second.Sample_ID', all.x=TRUE)
# distance between samples#
require(fields)#
# source('greatcircle_funcs.R') # alternative, probably faster#
alldists = rdist.earth(as.matrix(dat[,c('First.Lon', 'First.Lat')]), as.matrix(dat[,c('Second.Lon', 'Second.Lat')]), miles=FALSE, R=6371) # see http://www.r-bloggers.com/great-circle-distance-calculations-in-r/ # slow because it does ALL pairwise distances, instead of just in order#
dat$distkm = diag(alldists)
# add mismatch rate#
	dat$Mismatch.prop = dat$Mismatching.loci/dat$Matching.loci
# order by number of matching loci#
dat = dat[order(dat$Matching.loci),]
write.csv(dat, file='proposed_lats.csv')
