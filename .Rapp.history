source('~/Google Drive/Pinsky Lab/Philippines/Survey Conversion Files/2014/Michelle's scripts/extractanem2014_20141028.R', chdir = TRUE)
source('~/Desktop/extractanem2014_20141028.R', chdir = TRUE)
setwd('~/Desktop/extractanem2014_20141028.R')
# For 2014 surveys#
setwd('~/Desktop/extractanem2014_20141028.R')
heisenberg <-read.csv(file="~/Downloads/simple.csv",head=TRUE,seq=",")
help(read.csv)
heisenberg <-read.csv(file="~/Downloads/simple.csv",header=TRUE,seq=",")
heisenberg <-read.csv(file="~/Downloads/simple.csv",header=TRUE,sep=",")
heisenberg <-read.csv(file="~/Downloads/simple.csv",head=TRUE,sep=",")
heisenberg
summary(heisenberg)
dir()
getwd()
heisenberg$trial
heisenberg$mass
w1 <- read.csv(file="~/Downloads/w1.dat", sep=",", head =TRUE)
w1 <- read.csv(file="~/Downloads/w1.dat.txt", sep=",", head =TRUE)
names(w1)
tree<- read.csv(file="~/Downloads/trees91.csv", sep",", head=TRUE)
tree<- read.csv(file="~/Downloads/trees91.csv", sep=",", head=TRUE)
names(tree)
help(stripchart)
stripchart(w1$vals)
stripchart(w1$vals,method="stack")
stripchart(w1$vals,method="jitter")
stripchart(w1$vals,vertical=TRUE)
stripchart(w1$vals,vertical=TRUE,method="jitter")
stripchart(w1$vals,vertical=TRUE,method="stack")
stripchart(w1$vals,method="stack",)
stripchart(w1$vals,method="stack",main='Leaf BioMass in High CO2 Environment', xlab='BioMass of Leaves')
stripchart(w1$vals,method="stack")
title('Leaf Biomass in High CO2 Environment', xlab='Biomass of Leaves')
stripchart(w1$vals,method="stack")
title('Leaf Biomass in High CO2 Environment', xlab='Biomass of Leaves')
hist(w1$vals)
hist(w1$vals,main="Distribution of w1", xlab="w1")
Pool31<-read.tsv("~/PCFB/31laxnor.log.tsv")
Pool31<-read.table("~/PCFB/31laxnor.log.tsv")
names(Pool31)
hist(Pool31$V2)
hist(Pool31$V2,xlab="# of reads per barcode")
hist(w1$vals,breaks=2)
hist(w1$vals,breaks=4)
hist(w1$vals,breaks=6)
hist(w1$vals,breaks=8)
hist(w1$vals,breaks=12)
hist(w1$vals,breaks=12,xlim=c(0,10))
hist(w1$vals,breaks=12,xlim=c(-1,2))
hist(w1$vals,breaks=12,xlim=c(0,2))
hist(w1$vals,breaks=12,xlim=c(1,1.3)
)
hist(w1$vals,breaks=12,xlim=c(0.9,1.3))
hist(w1$vals,main='Leaf BioMass in High CO2 Environment',xlab='BioMass of Leaves',ylim=c(0,16))
stripchart(w1$vals,add=TRUE,at=15.5)
hist(Pool31$V2)
stripchart(Pool31$V2,add=TRUE,at 14.5)
stripchart(Pool31$V2,add=TRUE,at=14.5)
stripchart(Pool31$V2,add=TRUE,at=14.1)
hist(Pool31$V2, breaks=20)
hist(Pool31$V2, breaks=48)
hist(Pool31$V2, breaks=48,xlim=c(100,2000000))
hist(Pool31$V2, breaks=48,xlim=c(0,2000000))
w1 <- read.csv(file="w1.dat",sep=",",head=TRUE)
w1 <- read.csv(file="~/Downloads/w1.dat.txt",sep=",",head=TRUE)
tree<-read.csv(file="~/Downloads/trees91.csv",sep=",",head=TRUE)
boxplot(w1$vals)
boxplot(w1$vals,main='Leaf Biomass in High CO2',ylab='Biomass of Leaves')
boxplot(w1$vals,main='Leaf Biomass in High CO2',ylab='Biomass of Leaves',horizontal=TRUE)
hist(w1$vals,main='Leaf Biomass',xlab='Biomass of Leaves', ylim=c(0,16))
boxplot(w1$vals,horizontal=TRUE,at=15.5,add=TRUE,axes=FALSE)
Pool31
Pool31<-read.table(file="~/PCFB/31laxnor.log.tsv")
names(Pool31)
hist(Pool31$V2)
boxplot(Pool31$V2,horizontal=TRUE,at=14.1,add=TRUE,axes=FALSE)
hist(w1$vals,main='Leaf Biomass',xlab='Biomass of Leaves', ylim=c(0,16))
boxplot(w1$vals,horizontal=TRUE,at=15.5,add=TRUE,axes=FALSE)
stripchart(w1$vals,add=TRUE,at=15)
tree$C <- factor(tree$C)
tree$N<-factor(tree$N)
boxplot(tree$STBM,main='Stem Biomass',ylab='Biomass of Stems')
boxplot(tree$STBM~tree$C)
m2M7 <- read.table(file=~/Downloads/m2M7.tsv,head=TRUE)
m2M7 <- read.table(file=""~/Downloads/m2M7.tsv",head=TRUE)
m2M7 <- read.table(file="~/Downloads/m2M7.tsv",head=TRUE)
names(m2M7)
m2M7 <- read.table(file="~/Downloads/m2M7.tsv")
names(m2M7)
stripchart(m2M7$V1)
hist(m2M7$V1)
hist(m2M7$V1, breaks=12)
help(hist)
hist(m2M7$V1, breaks=100, ylim=c(0,100000))
hist(m2M7$V1, breaks=10, ylim=c(0,100000))
hist(m2M7$V1, breaks=10, ylim=c(0,10000))
d <- data.frame(u=m2M7$V1, v=m2M7$V2)
pairs(d)
dat$First.year = as.numeric(paste('20', gsub('APCL_(?<=[0-9]{2}).*', '', dat$First.ID), sep='', perl = TRUE))
###############
## prep#
#
setwd('/Users/macair/Documents/Philippines/Genetics/parentage/Cervus_2016-01-06/')#
#
dat = read.csv('DP20g95/DP20g95_ID.csv', stringsAsFactors=FALSE)#
nrow(dat) # 65
this code is doing#
dat$First.year = as.numeric(paste('20', gsub('APCL_(?<=[0-9]{2}).*', '', dat$First.ID), sep='', perl = TRUE))
dat$First.year = as.numeric(paste('20', gsub('APCL_(?<=[0-9]{2}).*', '', dat$First.ID), sep='', perl = TRUE))
dat$First.year = as.numeric(paste('20', gsub('APCL_([0-9]{2}).*', '', dat$First.ID), sep='', perl = TRUE))
dat$First.year
gsub('APCL|_.*'), '', APCL13_030L5403
gsub(('APCL|_.*'), '', APCL13_030L5403)
tree = APCL13_030L5403
tree <- APCL13_030L5403
tree <- c(APCL13_030L5403>
)
tree <- c(APCL13_030L5403)
tree <- c(2,3)
tree <- s(APCL13_030L5403)
tree <- "APCL13_030L5403"
gsub('APCL|_.*', '', tree), sep=''))
gsub('APCL|_.*', '', tree)
tree <-"APCL_13_030L5403"
gsub('APCL|_.*', '', tree)
tree <-"APCL_13030L5403"
gsub('APCL|_.*', '', tree)
gsub('APCL_|.*', '', tree)
gsub('APCL/_|.*', '', tree)
gsub('APCL\_|.*', '', tree)
gsub('APCL_[0-9]{2}.*', '', tree, perl=TRUE)
gsub('APCL_([0-9]{2})[0-9]{3}\.*', '', tree, perl=TRUE)
gsub('APCL_([0-9]{2})[0-9]{3}/.*', '', tree, perl=TRUE)
gsub('APCL_|.*', '', tree, perl=TRUE)
gsub('APCL_([0-9]{2})[0-9]{3}/', '', tree, perl=TRUE)
gsub('APCL_([0-9]{2})[0-9]{3}', '', tree, perl=TRUE)
gsub('APCL_([0-9]{2})[0-9]{3}.*', '', tree, perl=TRUE)
gsub('APCL_/([0-9]{2})/[0-9]{3}.*', '', tree, perl=TRUE)
gsub('APCL_/([0-9]{2})[0-9]{3}.*', '', tree, perl=TRUE)
gsub('APCL_|[0-9]{3}.*', '', tree, perl=TRUE)
gsub('APCL_|[0-9]{3}L[0-9]{4}', '', tree, perl=TRUE)
# add year of the sample#
dat$First.year = as.numeric(paste('20', gsub('APCL_|[0-9]{3}L[0-9]{4}', '', dat$First.ID), sep=''))#
dat$Second.year = as.numeric(paste('20', gsub('APCL_|[0-9]{3}L[0-9]{4}', '', dat$Second.ID), sep=''))
setwd('/Users/mpinsky/Documents/Rutgers/Philippines/Genetics/parentage/Cervus 2015-06-19/')#
#
dat = read.csv('r70m5/batch_1.r70m5.identity.csv', stringsAsFactors=FALSE)#
nrow(dat) # 14023
setwd('/Users/macair/Documents/Philippines/Genetics/parentage/Cervus_2016-01-06/')#
#
dat = read.csv('DP20g95/DP20g95_ID.csv', stringsAsFactors=FALSE)#
nrow(dat) # 65
# add year of the sample#
dat$First.year = as.numeric(paste('20', gsub('APCL_|[0-9]{3}L[0-9]{4}', '', dat$First.ID, perl=TRUE), sep=''))#
dat$Second.year = as.numeric(paste('20', gsub('APCL_|[0-9]{3}L[0-9]{4}', '', dat$Second.ID, perl=TRUE), sep=''))
dat$First.year
dat$Second.year
dat$Second.ID
# add year of the sample#
dat$First.year = as.numeric(paste('20', gsub('APCL_|[0-9,A-Z]{3}L[0-9]{4}', '', dat$First.ID, perl=TRUE), sep=''))#
dat$Second.year = as.numeric(paste('20', gsub('APCL_|[0-9,A-Z]{3}L[0-9]{4}', '', dat$Second.ID, perl=TRUE), sep=''))
# fix ID to always have 4-digit ligation IDs (needed for matching against Sample_Data google sheet) - skipped - ID's already have 4-digit ligation IDs#
ind = grep('L[[:digit:]]{3}$', dat$First.ID) # rows with 3-digit ligation IDs#
dat$First.ID[ind] = gsub('L([[:digit:]]{3})$', 'L0\\1', dat$First.ID[ind])#
ind = grep('L[[:digit:]]{3}$', dat$Second.ID)#
dat$Second.ID[ind] = gsub('L([[:digit:]]{3})$', 'L0\\1', dat$Second.ID[ind])
# add sampleid#
dat$First.SampleID = gsub('L[[:digit:]]{1,}$', '', dat$First.ID)#
dat$Second.SampleID = gsub('L[[:digit:]]{1,}$', '', dat$Second.ID)
# add lat/lon from our Google Sheet#
require(googlesheets)#
# gs_auth(new_user = TRUE) # run this if having authorization problems#
mykey = '1Rf_dFJ5WK-vTTsIT_kHHOcFrKzQtMFtKiuXiFw1lh9Y' # for Sample_Data sheet#
gssampdat <- gs_key(mykey)#
sampledata <- gs_read(gssampdat, ws='Samples')
m1 = sampledata#
names(m1) = paste('First.', names(m1), sep='')#
dat = merge(dat, m1, by.x='First.SampleID', by.y = 'First.Sample_ID', all.x=TRUE)#
m2 = sampledata#
names(m2) = paste('Second.', names(m2), sep='')#
dat = merge(dat, m2, by.x='Second.SampleID', by.y = 'Second.Sample_ID', all.x=TRUE)
# distance between samples#
require(fields)#
# source('greatcircle_funcs.R') # alternative, probably faster#
alldists = rdist.earth(as.matrix(dat[,c('First.Lon', 'First.Lat')]), as.matrix(dat[,c('Second.Lon', 'Second.Lat')]), miles=FALSE, R=6371) # see http://www.r-bloggers.com/great-circle-distance-calculations-in-r/ # slow because it does ALL pairwise distances, instead of just in order#
dat$distkm = diag(alldists)
dat$distkm
dat$First.SampleID
dat$First.ID
# add sampleid#
dat$First.SampleID_dd = gsub('L[[:digit:]]{1,}$', '', dat$First.ID)#
dat$Second.SampleID_dd = gsub('L[[:digit:]]{1,}$', '', dat$Second.ID)
dat$First.SampleID_dd
gsub('20', '', 2013)
gsub('APCL_[0-9]{2}', '', APCL_14255)
gsub('APCL_[0-9]{2}', '', APCL_14255, perl=TRUE)
tree <-APCL_14255
tree <-"APCL_14255"
gsub('APCL_[0-9]{2}', '', tree, perl=TRUE)
dat$First.SampleID = paste('APCL', gsub('20', '', dat$First.year), '_', gsub('APCL_[0-9]{2}', '', dat$FirstSampleID_dd, perl=TRUE), sep='')
dat$First.SampleID
gsub('APCL_[0-9]{2}', '', dat$First.SampleID_dd, perl=TRUE
)
dat$First.SampleID = paste('APCL', gsub('20', '', dat$First.year), '_', gsub('APCL_[0-9]{2}', '', dat$First.SampleID_dd, perl=TRUE), sep='')
dat$First.SampleID
#fix sampleid from dDocent format back to Sample_Data format#
dat$First.SampleID = paste('APCL', gsub('20', '', dat$First.year), '_', gsub('APCL_[0-9]{2}', '', dat$First.SampleID_dd, perl=TRUE), sep='')	#
dat$Second.SampleID = paste('APCL', gsub('20', '', dat$Second.year), '_', gsub('APCL_[0-9]{2}', '', dat$Second.SampleID_dd, perl=TRUE), sep='')
# add lat/lon from our Google Sheet#
require(googlesheets)#
# gs_auth(new_user = TRUE) # run this if having authorization problems#
mykey = '1Rf_dFJ5WK-vTTsIT_kHHOcFrKzQtMFtKiuXiFw1lh9Y' # for Sample_Data sheet#
gssampdat <- gs_key(mykey)#
sampledata <- gs_read(gssampdat, ws='Samples')
m1 = sampledata#
names(m1) = paste('First.', names(m1), sep='')#
dat = merge(dat, m1, by.x='First.SampleID', by.y = 'First.Sample_ID', all.x=TRUE)#
m2 = sampledata#
names(m2) = paste('Second.', names(m2), sep='')#
dat = merge(dat, m2, by.x='Second.SampleID', by.y = 'Second.Sample_ID', all.x=TRUE)
# distance between samples#
require(fields)#
# source('greatcircle_funcs.R') # alternative, probably faster#
alldists = rdist.earth(as.matrix(dat[,c('First.Lon', 'First.Lat')]), as.matrix(dat[,c('Second.Lon', 'Second.Lat')]), miles=FALSE, R=6371) # see http://www.r-bloggers.com/great-circle-distance-calculations-in-r/ # slow because it does ALL pairwise distances, instead of just in order#
dat$distkm = diag(alldists)
require(fields)
alldists = rdist.earth(as.matrix(dat[,c('First.Lon', 'First.Lat')]), as.matrix(dat[,c('Second.Lon', 'Second.Lat')]), miles=FALSE, R=6371)
dat
names(dat)
alldists = rdist.earth(as.matrix(dat[,c('First.Lon.y', 'First.Lat.y')]), as.matrix(dat[,c('Second.Lon.y', 'Second.Lat.y')]), miles=FALSE, R=6371) # see http://www.r-bloggers.com/great-circle-distance-calculations-in-r/ # slow because it does ALL pairwise distances, instead of just in order
dat$distkm = diag(alldists)
# add ligation ID#
dat$First.LigID = as.numeric(gsub('APCL[[:digit:]]{2}_[[:digit:]]{1,}L', '', dat$First.ID))#
dat$Second.LigID = as.numeric(gsub('APCL[[:digit:]]{2}_[[:digit:]]{1,}L', '', dat$Second.ID))
# add mismatch rate#
	dat$Mismatch.prop = dat$Mismatching.loci/dat$Matching.loci
# order by number of matching loci#
dat = dat[order(dat$Matching.loci),]
hist(dat$Matching.loci, col='grey', breaks=50) # most match at <1000 SNPs
hist(dat$Mismatch.prop, col='grey', breaks=50) # interesting second hump < 0.02
plot(dat$Matching.loci, dat$Mismatching.loci)#
abline(0, 0.005) # 5% error rate
plot(dat$Matching.loci, dat$Mismatch.prop)#
abline(h=0.015)
colnms = c('First.ID', 'Second.ID', 'Loci.typed', 'Loci.typed.1', 'Matching.loci', 'Mismatching.loci', 'First.Size', 'Second.Size', 'First.Tail_color', 'Second.Tail_color', 'distkm', 'First.Notes', 'Second.Notes')
# exact matches#
sum(dat$Status == 'Exact match') # 0 exact matches
ind = dat$Matching.loci>=2000 # seem like good matches. out of ~11k loci#
sum(ind) # only 35#
dat[ind,colnms]#
table(dat$First.year[ind], dat$Second.year[ind]) # figure out the years of the matches: most are 2013->2014
dat$distkm
plot(dat$Matching.loci, dat$Mismatch.prop)#
abline(h=0.015)
dat$Mismatch.prop
dat=dat[order(dat$Mismatch.prop),]
dat$Mismatch.prop
dat[2]
dat
dat$Mismatch.prop
write.csv (dat, file = "mismatch.csv")
